{"ast":null,"code":"var _jsxFileName = \"/Users/dhc/Fetch-Project/fetchrewards/src/pages/databasecomponents/productlist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport \"./productlist.css\"; //export productlist\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProductList() {\n  _s();\n\n  const [records, setRecords] = useState([]); // This method fetches the records from the \"server\", for \"databases\" stored in local library public.\n  //super easy to use mongoose to create schemes to load into react if i need to connect to mongodb.\n\n  useEffect(() => {\n    async function getRecords() {\n      const response = await axios.get(\"productlist.json\");\n      const records = response.data;\n      setRecords(records);\n    }\n\n    getRecords();\n    return;\n  }, [records.length]); // sorts the product by increasing point value. can be other things like \"Popularity Ranking\", if my database was big enough.\n\n  const sortedProduct = records.sort((a, b) => {\n    return a.points - b.points;\n  }); // This method will run ProductMaker for the amount of records there are.\n\n  function products() {\n    return sortedProduct.map(record => {\n      return /*#__PURE__*/_jsxDEV(Productmaker, {\n        record: record\n      }, record.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 8\n      }, this);\n    });\n  } //fetch points database\n\n\n  const [record2, setPoints] = useState([]);\n  useEffect(() => {\n    async function getPoints() {\n      const response = await axios.get(\"points.json\");\n      const record2 = response.data;\n      setPoints(record2);\n    }\n\n    getPoints();\n    return;\n  }, [record2.length]); //Math.floor easily turns strings into integers\n\n  const sortedHistory = record2.sort((a, b) => {\n    return new Date(a.timestamp) - new Date(b.timestamp);\n  });\n\n  function remainingpoints() {\n    return record2.reduce(function (sum, record) {\n      return sum + Math.floor(record.points);\n    }, 0);\n  } //check if person has enough points.\n  //if they do, do a greedy type operation through the database until target value (point cost of product) is zero.\n\n\n  async function processPayment(e) {\n    e.preventDefault();\n\n    if (remainingpoints() < e.target.value) {\n      window.alert(\"Sorry, You do not have enough points!\");\n    } else {\n      const temppoints = e.target.value;\n\n      while (temppoints > 0) {\n        for (let i = 0; i < record2.length; i++) {\n          const currentpoints = temppoints - sortedHistory[i].points;\n        }\n      }\n    }\n  }\n\n  ; //constructor comes first to load the function\n\n  const Productmaker = props => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `productWrapper`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'productHeader',\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"banner\",\n        src: `${props.record.image}`,\n        alt: \"productimg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'productInfo',\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"productName\",\n          children: props.record.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: 'postText'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.record.detail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 56\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"points\",\n        children: props.record.points\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processPayment,\n      value: props.record.points,\n      children: \"Quick Buy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 7\n  }, this); // This following section will display the table with the records of products.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    style: {\n      maxHeight: '100vh',\n      overflowY: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Your Total Remaining Points! \", remainingpoints()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: products()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 4\n  }, this);\n}\n\n_s(ProductList, \"Hn5oQGI9HkBGacT+SmnICEEANUk=\");\n\n_c = ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useEffect","useState","axios","ProductList","records","setRecords","getRecords","response","get","data","length","sortedProduct","sort","a","b","points","products","map","record","name","record2","setPoints","getPoints","sortedHistory","Date","timestamp","remainingpoints","reduce","sum","Math","floor","processPayment","e","preventDefault","target","value","window","alert","temppoints","i","currentpoints","Productmaker","props","image","detail","maxHeight","overflowY"],"sources":["/Users/dhc/Fetch-Project/fetchrewards/src/pages/databasecomponents/productlist.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport \"./productlist.css\"\n\n\n\n//export productlist\nexport default function ProductList() {\n const [records, setRecords] = useState([]);\n \n // This method fetches the records from the \"server\", for \"databases\" stored in local library public.\n //super easy to use mongoose to create schemes to load into react if i need to connect to mongodb.\n\n useEffect(() => {\n  async function getRecords() {\n    const response = await axios.get(\"productlist.json\");\n    const records = response.data\n    setRecords(records);\n  }\n\n  getRecords();\n\n   return;\n }, [records.length]);\n\n // sorts the product by increasing point value. can be other things like \"Popularity Ranking\", if my database was big enough.\n const sortedProduct = records.sort((a, b) => {\n  return ((a.points)- (b.points));\n})\n\n\n\n // This method will run ProductMaker for the amount of records there are.\n function products() {\n   return sortedProduct.map((record) => {\n     \n     return (\n       <Productmaker\n         record={record}\n         key={record.name}\n       />\n     );\n   });\n }\n \n\n\n//fetch points database\nconst [record2, setPoints] = useState([]);\n    \n    useEffect(() => {\n     async function getPoints() {\n       const response = await axios.get(\"points.json\");\n       const record2 = response.data\n       setPoints(record2);\n     }\n   \n     getPoints();\n   \n      return;\n    }, [record2.length]);\n\n     //Math.floor easily turns strings into integers\n     const sortedHistory = record2.sort((a, b) => {\n      return (new Date(a.timestamp)- new Date(b.timestamp));\n    })\n    \n    function remainingpoints() {\n      return record2.reduce(function (sum, record) {\n        return sum + Math.floor(record.points);\n    }, 0);\n    }\n\n    //check if person has enough points.\n    //if they do, do a greedy type operation through the database until target value (point cost of product) is zero.\n\n    async function processPayment(e) {\n      e.preventDefault();\n      if (remainingpoints() < e.target.value) {\n        window.alert(\"Sorry, You do not have enough points!\");\n      }\n      else {\n        const temppoints = e.target.value\n        while (temppoints > 0 ) {  \n            for (let i=0; i<record2.length; i++) {\n              const currentpoints = (temppoints - sortedHistory[i].points)\n\n            }\n        }\n      }\n      };\n\n\n      \n    //constructor comes first to load the function\n    const Productmaker = (props) => \n    (\n      <div className={`productWrapper`}>\n                        <div className={'productHeader'} >\n                        <img className=\"banner\" src={`${props.record.image}`} alt=\"productimg\"/>\n                            <div className={'productInfo'}>\n                                <h2 className=\"productName\">{props.record.name}</h2>\n                            </div>\n                            <p className={'postText'}/><p>{props.record.detail}</p>\n                            <p className=\"points\">{props.record.points}</p>\n                            </div>\n                            <button onClick={processPayment} value={props.record.points}>Quick Buy</button>\n                    </div>\n    );\n    \n\n\n // This following section will display the table with the records of products.\n return (\n   <div className= \"background\" style={{ maxHeight: '100vh', overflowY:'auto'}}>\n     <h3>Your Total Remaining Points! {remainingpoints()}</h3>\n       <div>{products()}</div>\n   </div>\n );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}